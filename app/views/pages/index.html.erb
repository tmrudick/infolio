<div id="navbar">
		<a href="/" id="logo"></a>
	</div>
	<div id="wrapper">
		<div id="profile">
		
		<div id="socialicons">
				<%= image_tag("fblogo.png", :size => "25x25") %>
				<%= if current_user.twitter 
				image_tag("twitterlogo.png", :size => "25x25") 
				end %>
		</div>
				
			<div id="content">
				<h1><%= current_user.first_name %> <%= current_user.last_name %></h1>
				<% if current_user.twitter %>
				<p><%= Twitter.user("#{current_user.twitter}").description %></p>
				<% end %>
				<br>
			</div>
		</div>
		<div id="avatar">
		<%= image_tag "/data/#{current_user.id}/profilePic", :class => "profilePic"%>
		</div>
		<div id="module1">
			<div class="block1">
				<p>Friend Network</p>
				<hr>
				<div id="circle1"> 
    		</div>
			</div>
			<div class="block1">
				<p>Type of Posts</p>
				<hr>
				<div id="circle2"> 
    		</div>
			</div>
			<div class="block1">
				<p>Type of Likes</p>
				<hr>
				<div id="circle3"> 
    		</div>
			</div>
		</div>
		<div id="module2">
			<div class="block2">
				<p>Twitter Activity</p>
				<hr>
				
				<% if current_user.twitter %>
				<p>
				<!-- Get latest Tweets -->
				<% @tweets = Twitter.search("from:#{current_user.twitter}", :include_entities=>true, :rpp => 3, :result_type => "recent").map do |status|
 				status.text
  					 end 
  				%>
  				<% @tweets.each do |t| %>
  				<p><%= t %> </p><br>
  				<% end %>
				<!-- END Get latest Tweets -->				
				</p>
				
				<!-- Get latest hashtags -->
				<% @tweets = Twitter.search("from:#{current_user.twitter} #", :include_entities=>true, :type => "recent") %>
  				<% result = Hash.new(0)
  				@tweets.each do |t| 
  				hash = ((t.hashtags).map(&:text).flatten)
  				hash.each { |ht| result[(ht.downcase)] += 1 }
  				 end %>
  				<p>
  				Twitter Hashtags: <%= result %>
  				</p>
  				
				<!-- END Get latest Tweets -->	
				
				
				<% else %>
				
				Give us your twitter handle
				<%= link_to 'Add Twitter Handle', edit_user_path(current_user.id) %>
				
				
				<% end %>
			</div>
		</div>
		
		<div id="module3">
			<div class="block3">
				<p class="block3p">Twitter Statistics</p>
				<hr>
				<% if current_user.twitter %>
				<p class="statscaption force">Last seen in</p>
				<p class="statsdata force"><%= Twitter.user("#{current_user.twitter}").location %></p>
				<p class="statscaption force">Number of tweets</p>
				<p class="statsdata force"><%= Twitter.user("#{current_user.twitter}").statuses_count %></p>
				<p class="statscaption force">Number of followers</p>
				<p class="statsdata force"><%= Twitter.user("#{current_user.twitter}").followers_count %></p>
			<% else %>
			
			<p> Give us your twitter account </p>
			
			<% end %>
			</div>
		</div>
		<div class="clear"></div>
		<div id="module4">
		  <div class="block4">
		    <p class="block4p">Places</p>
		    <hr>
		    <div id="map" style="width:890px; background-color: #E5E3DF;"></div>
		  </div>
		</div>
	</div>
	
	<div id="popup" style="display:none;position:absolute;background:#fff;">
	  <p></p>
	</div>

  <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyCv31jeSAZxiIvrNbXd69mJVi2Md38e1Oc&sensor=false"></script>
<script type="text/javascript">
  $(function() {
    
    var makeCircleThing = function (elementInfo, dataIn, labels) {
      var data = dataIn;

			var w = 225,
			    h = 225,
			    r = Math.min(w, h) / 2,
			    color = d3.scale.category10(),
			    donut = d3.layout.pie().sort(null),
			    arc = d3.svg.arc().innerRadius(r - 50).outerRadius(r - 10);
			
			var svg = d3.select(elementInfo).append("svg:svg")
			    .attr("width", w)
			    .attr("height", h)
			    .append("svg:g")
			    .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")");
			
			var arcs = svg.selectAll("path")
			    .data(donut(data))
			  .enter().append("svg:path")
			    .attr("fill", function(d, i) { return color(i); })
			    .attr("d", arc)
			    .each(function(d) { this._current = d; }).on("mouseover", function(obj, index) {
			      var popup = $("#popup");
			      $("#popup p").text(labels[index]);
			      popup.offset({ top: d3.event.clientY, left: d3.event.clientX });
			      popup.show();
			    }).on("mouseout", function() {
			      var popup = $("#popup");
			      popup.hide();
			    });
			
			// Store the currently-displayed angles in this._current.
			// Then, interpolate from this._current to the new angles.
			function arcTween(a) {
			  var i = d3.interpolate(this._current, a);
			  this._current = i(0);
			  return function(t) {
			    return arc(i(t));
			  };
			} 
    }
    
    var lowSat = [{featureType: "all",stylers: [{ saturation: -100 }]}];
    
    // fake data
    makeCircleThing("#circle1", [1,2,3,4,5]);
    
    
    // fake data
    makeCircleThing("#circle3", [234,234235,3,234]);
    
    
    var myOptions = {
    	mapTypeId: google.maps.MapTypeId.ROADMAP,
    	styles: lowSat,
    	mapTypeControl: false,
    	panControl: false,
    	zoomControl: true,
    	mapTypeControl: false,
    	scaleControl: false,
    	streetViewControl: false,
    	overviewMapControl: false
    };
    
    var map = new google.maps.Map(document.getElementById("map"), myOptions);
    
    var placePromise = $.get("/data/<%= current_user.id %>/places", function(results) {
      var bounds = new google.maps.LatLngBounds();
      for (var i in results) {
        var place = results[i];
        var myLatlng = new google.maps.LatLng(place.latitude,place.longitude);
        bounds.extend(myLatlng);
        var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title:place.message
        });
      }
      map.fitBounds(bounds);
    });
    
    var postPromise = $.get("/data/<%= current_user.id %>/posts", function(results) {
    });
    
    var photosPromise = $.get("/data/<%= current_user.id %>/photos", function(results) {
    });
    
    $.when(placePromise, postPromise, photosPromise).then(
      function(placeJSON, postJSON, photosJSON){
          var days = [];
          days.push(0);
          days.push(0);
          days.push(0);
          days.push(0);
          days.push(0);
          days.push(0);
          days.push(0);
          
          // real data
          makeCircleThing("#circle2", [postJSON[0].length, placeJSON[0].length, photosJSON[0].length], ["Posts", "Places", "Photos"]);

          for (var i in postJSON) {
            datestr = postJSON[0][i].updated_time;
            date = Date.parse(postJSON[0][i].updated_time);
            days[date.getDay()]++;
          }
          
          for (var j in placeJSON) {    
            datestr = placeJSON[0][j].timestamp;
            date = Date.parse(placeJSON[0][j].timestamp);
            days[date.getDay()]++;
          }
          
          for (var k in photosJSON) {    
            datestr = photosJSON[0][k].created_time;
            date = Date.parse(photosJSON[0][k].created_time);
            days[date.getDay()]++;
          }


        });
  });
</script>
